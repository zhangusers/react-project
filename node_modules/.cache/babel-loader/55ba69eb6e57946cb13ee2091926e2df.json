{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSafeState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Same as React.useState but `setState` accept `ignoreDestroy` param to not to setState after destroyed.\n * We do not make this auto is to avoid real memory leak.\n * Developer should confirm it's safe to ignore themselves.\n */\n\n\nfunction useSafeState(defaultValue) {\n  var destroyRef = React.useRef(false);\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  React.useEffect(function () {\n    destroyRef.current = false;\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n\n  function safeSetState(updater, ignoreDestroy) {\n    if (ignoreDestroy && destroyRef.current) {\n      return;\n    }\n\n    setValue(updater);\n  }\n\n  return [value, safeSetState];\n}","map":{"version":3,"sources":["/Users/zhangzhuang/React/react-admin/node_modules/rc-util/lib/hooks/useState.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","useSafeState","_slicedToArray2","React","defaultValue","destroyRef","useRef","_React$useState","useState","_React$useState2","setValue","useEffect","current","safeSetState","updater","ignoreDestroy"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8CAAD,CAApC;;AAEAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,eAAe,GAAGP,sBAAsB,CAACD,OAAO,CAAC,sCAAD,CAAR,CAA5C;;AAEA,IAAIS,KAAK,GAAGV,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASO,YAAT,CAAsBG,YAAtB,EAAoC;AAClC,MAAIC,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAa,KAAb,CAAjB;;AAEA,MAAIC,eAAe,GAAGJ,KAAK,CAACK,QAAN,CAAeJ,YAAf,CAAtB;AAAA,MACIK,gBAAgB,GAAG,CAAC,GAAGP,eAAe,CAACF,OAApB,EAA6BO,eAA7B,EAA8C,CAA9C,CADvB;AAAA,MAEIR,KAAK,GAAGU,gBAAgB,CAAC,CAAD,CAF5B;AAAA,MAGIC,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAH/B;;AAKAN,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAY;AAC1BN,IAAAA,UAAU,CAACO,OAAX,GAAqB,KAArB;AACA,WAAO,YAAY;AACjBP,MAAAA,UAAU,CAACO,OAAX,GAAqB,IAArB;AACD,KAFD;AAGD,GALD,EAKG,EALH;;AAOA,WAASC,YAAT,CAAsBC,OAAtB,EAA+BC,aAA/B,EAA8C;AAC5C,QAAIA,aAAa,IAAIV,UAAU,CAACO,OAAhC,EAAyC;AACvC;AACD;;AAEDF,IAAAA,QAAQ,CAACI,OAAD,CAAR;AACD;;AAED,SAAO,CAACf,KAAD,EAAQc,YAAR,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSafeState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\n/**\n * Same as React.useState but `setState` accept `ignoreDestroy` param to not to setState after destroyed.\n * We do not make this auto is to avoid real memory leak.\n * Developer should confirm it's safe to ignore themselves.\n */\nfunction useSafeState(defaultValue) {\n  var destroyRef = React.useRef(false);\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  React.useEffect(function () {\n    destroyRef.current = false;\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n\n  function safeSetState(updater, ignoreDestroy) {\n    if (ignoreDestroy && destroyRef.current) {\n      return;\n    }\n\n    setValue(updater);\n  }\n\n  return [value, safeSetState];\n}"]},"metadata":{},"sourceType":"script"}